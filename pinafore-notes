#!/usr/bin/env pinafore
let
import "media" end;

entitytype World;
world = cell.Store @World !"world.pinafore-notes" ?store;

let
    namespace Item of
        entitytype Type;
        entitytype Value;
    end;

    datatype storable Item of
        Mk Type.Item Value.Item !"Item.pinafore-notes";
    end;

    namespace Item of
        new: Type.Item -> Action Item =
            fn t => do
                v <- new.OpenEntity @Value.Item;
                pure $ Mk t v;
            end;
        isType: Type.Item -> Item -> Boolean = fn t, Mk ti _ => t == ti;
    end;
in expose Item, Type.Item, new.Item, isType.Item;

namespace Item of
    all: FiniteSetModel Item =
        property @Item @World !"Item-World.pinafore-notes" ?store !@ world;
end;

nameOf: Property Item Text =
    property @Item @Text !"name.pinafore-notes" ?store;

namespace Note of
    itemtype: Type.Item = point.OpenEntity @Type.Item !"Note.pinafore-notes";
end;
predicatetype storable Note <: Item = isType.Item itemtype.Note;
namespace Note of
    new: Action Note = map.Action (coerce @Note) $ new.Item itemtype.Note;
    all: FiniteSetModel Note = dynamic.Prism @Note !$$ all.Item;
end;

content = property @Note @CommonMarkText !"content.pinafore-notes" ?store;

newNote: Action Note =
    do
        item <- new.Note;
        all.Item += item;
        pure item;
    end;

import "gnome", "UILib" end;
with UILib end;

notePane: Note -> Pane =
    fn note =>
    let
        noteContent: WholeModel CommonMarkText =
            content !$ {note};
        textModel: TextModel =
            fromWhole.TextModel $ asText.CommonMarkText !$ noteContent;
        htmlErr: Text -> HTMLText =
            fn t => with HTMLText in tag "em" $ plain "error: " <> plain t;
        htmlRef: WholeModel +HTMLText =
            {from.Result htmlErr id $ toHTML.CommonMarkText %noteContent};
    in
    Mk.Pane of
        titleModel = {"Note"};
        contents = with Widget.GTK. in
            notebook unknown.WholeModel
            [
                (label {"View"},webView.WebKit htmlRef),
                (label {"Edit"},scrolled $ textView textModel)
            ]
    end;

datatype Column -p of
    Mk of
        name: WholeModel +Text;
        contents: p -> WholeModel +Text;
    end;
end;

attributeColumn: Text -> Attribute -p +Text -> Column p =
    fn name, prop =>
        Mk.Column of
            name = {name};
            contents = fn item => immut.WholeModel $ prop !$ {item};
        end;

datatype TableSetWidget {-p,+q} of
    Mk of
        order: ModelOrder p;
        itemSet: FiniteSetModel {-p,+q};
        columns: List (Column p);
        itemPane: p -> Pane;
    end;
end;

subtype TableSetWidget {a,+Entity} <: SetWidget {a,-Entity} =
    fn Mk.TableSetWidget => Mk.SetWidget $
        fn mSelectionModel =>
            exec.Widget.GTK $
            do
                itemList <- getList.FiniteSetModel order itemSet;
                let
                    columnPairs = map.List (fn Mk.Column => (name,contents)) columns;
                end;
                pure $ listTable.Widget.GTK. columnPairs itemList (fn item => paneWindow.Pane $ itemPane item) mSelectionModel;
            end;

newNoteCommand: Command (Context.Command *: SetContext Note) =
    Mk.Command of
        name = "New Note";
        defaultKeyBinding = Just "Ctrl+K";
        action = fn (ctxt,Mk.SetContext) =>
            do
                note <- newNote;
                addItem note;
            end;
    end;

notesPresentation: SetPresentation Note =
    Mk.SetPresentation of
        setName = "Notes";
        itemSet = all.Note;
        menuEntries = [newNoteCommand,deleteCommand];
        itemPane = notePane;
        setWidget =
            Mk.TableSetWidget of
                order = on.ModelOrder nameOf order.Text;
                columns =
                [
                    attributeColumn "Name" nameOf
                ];
                itemSet = all.Note;
                itemPane = notePane;
            end;
    end;

in

run.Context $ fn Mk.Context =>
imply
    ?store = store;
    ?undoHandler = undoHandler;
    ?gtk = gtk;
in
do
    pane <- present.SetPresentation notesPresentation;
    _ <- paneWindow.Pane pane;
    pure ()
end
